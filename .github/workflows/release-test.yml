name: Release Test

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  release:
    name: Release Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Towncrier
        run: |
          pip install towncrier

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup GitHub CLI
        run: |
          gh --version
          echo "‚úÖ GitHub CLI est√° dispon√≠vel"
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          echo "‚úÖ GitHub CLI autenticado"

      - name: Check for news fragments
        run: |
          echo "üîç Verificando fragments de not√≠cias..."
          if [ -d "news" ] && [ "$(ls -A news)" ]; then
            echo "‚úÖ Fragments encontrados:"
            find news -name "*.md" -type f
          else
            echo "‚ö†Ô∏è Nenhum fragment de not√≠cia encontrado"
            echo "Criando fragment de exemplo..."
            mkdir -p news/feature
            echo "Adiciona funcionalidade de teste para branch test" > news/feature/001-test-feature.md
          fi

      - name: Build changelog with Towncrier
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìù Gerando changelog com Towncrier..."
          
          # Ler vers√£o atual
          CURRENT_VERSION=$(cat version.txt)
          echo "Vers√£o atual: $CURRENT_VERSION"
          
          # Gerar changelog
          towncrier build --yes
          
          echo "‚úÖ Changelog gerado com sucesso"

      - name: Update version
        run: |
          echo "üîÑ Atualizando vers√£o..."
          
          # Ler vers√£o atual
          CURRENT_VERSION=$(cat version.txt)
          echo "Vers√£o atual: $CURRENT_VERSION"
          
          # Extrair n√∫meros da vers√£o
          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            # Incrementar patch version para test
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-test"
            
            echo "Nova vers√£o: $NEW_VERSION"
            echo "$NEW_VERSION" > version.txt
            
            echo "‚úÖ Vers√£o atualizada para: $NEW_VERSION"
          else
            echo "‚ùå Formato de vers√£o inv√°lido: $CURRENT_VERSION"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          echo "üíæ Commitando altera√ß√µes..."
          
          # Adicionar arquivos modificados
          git add version.txt CHANGELOG.md
          
          # Verificar se h√° mudan√ßas
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è Nenhuma mudan√ßa para commitar"
          else
            # Commit das altera√ß√µes
            git commit -m "chore: bump version for test branch [skip ci]"
            
            # Push das altera√ß√µes
            git push origin test
            echo "‚úÖ Altera√ß√µes enviadas para branch test"
          fi

      - name: Create and push tag
        run: |
          echo "üè∑Ô∏è Criando tag de release..."
          
          # Ler nova vers√£o
          NEW_VERSION=$(cat version.txt)
          TAG_NAME="${NEW_VERSION}"
          
          echo "Criando tag: $TAG_NAME"
          
          # Criar tag
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME for test branch"
          
          # Push da tag
          git push origin "$TAG_NAME"
          
          echo "‚úÖ Tag $TAG_NAME criada e enviada"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì¶ Criando GitHub Release..."
          
          # Ler vers√£o
          VERSION=$(cat version.txt)
          TAG_NAME="${VERSION}"
          
          # Ler changelog
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          
          # Criar release no GitHub
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME (Test)" \
            --notes "$CHANGELOG_CONTENT" \
            --target test \
            --prerelease
          
          echo "‚úÖ GitHub Release criado: $TAG_NAME"

      - name: Cleanup news fragments
        run: |
          echo "üßπ Limpando fragments de not√≠cias..."
          
          # Remover fragments processados
          if [ -d "news" ]; then
            find news -name "*.md" -type f -delete
            echo "‚úÖ Fragments removidos"
          fi
          
          # Commit da limpeza
          git add news/
          if ! git diff --staged --quiet; then
            git commit -m "chore: cleanup news fragments after release [skip ci]"
            git push origin test
            echo "‚úÖ Limpeza commitada"
          fi 