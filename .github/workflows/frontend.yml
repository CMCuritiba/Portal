name: Docker Build and Push Frontend

on:
  push:
    branches: [ "develop", "homolog" ]
    paths:
      - "frontend/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend
  NODE_VERSION: 20.x

defaults:
  run:
    working-directory: ./frontend

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Update Global Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

#      - name: Prettier
#        id: prettier
#        run: npx prettier@3.0.3 --single-quote --check 'src/**/*.{js,jsx,ts,tsx,css,scss}' --config=package.json
#
      - name: Install packages
        run: make install
#
#      - name: ESLint
#        id: eslint
#        if: ${{ success() || failure() }}
#        run: yarn run lint:ci
#
#      - name: i18n sync
#        id: i18n
#        if: ${{ success() || failure() }}
#        run: make i18n-ci
#
#      - name: Unit Tests
#        id: unit
#        if: ${{ success() || failure() }}
#        run: make test
#
#      - name: Report
#        if: ${{ success() || failure() }}
#        run: |
#          echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
##          echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
#          echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
##          echo '| Prettier | ${{ steps.prettier.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
##          echo '| ESLint | ${{ steps.eslint.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
##          echo '| i18n | ${{ steps.i18n.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
#          echo '| Unit Tests | ${{ steps.unit.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY

  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.result.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for version change
        id: version_check
        uses: EndBug/version-check@v2
        with:
          file-name: ./frontend/package.json
      - id: result
        run: echo "changed=${{ steps.version_check.outputs.changed }}" >> $GITHUB_OUTPUT

  build-and-push:
    if: needs.check-version.outputs.changed == 'true'

    runs-on: ubuntu-latest
    needs:
      - check-version
      - code-analysis
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from package.json
        id: frontend-version
        working-directory: ./frontend
        run: |
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      # Obter os metadados pode ser uteis quando forem geradas tags de versão
      # no repo. Ref:
      # https://docs.docker.com/build/ci/github-actions/manage-tags-labels/
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       type=raw,value=${{ steps.image-tag.outputs.tag }}
      #       type=raw,value=${{ needs.version.outputs.version }}
      #     labels: |
      #       org.label-schema.docker.cmd=docker run -d -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}

      - name: Build and push Docker image
        if: contains(github.ref, 'homolog')
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.frontend-version.outputs.version }}
            ${{ steps.frontend-version.outputs.version }}-homolog
            homolog
          labels: |
            ${{ steps.frontend-version.outputs.version }}
            ${{ steps.frontend-version.outputs.version }}-homolog
