name: Release

on:
  push:
    branches:
      - homolog
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm @semantic-release/github

      - name: DEV - Update Version and Create Dev Tag
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para develop (sem plugin GitHub)
          cp .releaserc.develop .releaserc

          # Executar semantic-release em dry-run para capturar nova versão e atualizar changelog
          OUTPUT=$(npx semantic-release --dry-run --no-ci 2>&1)
          echo "$OUTPUT"

          # Capturar a nova versão do output
          NEW_VERSION=$(echo "$OUTPUT" | grep -o "The next release version is [0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*" | head -1)

          # Se não conseguiu capturar a versão, tentar executar semantic-release para atualizar changelog
          if [ -z "$NEW_VERSION" ]; then
            echo "No new version detected, but updating changelog..."
            npx semantic-release --dry-run --no-ci --plugins @semantic-release/changelog
            NEW_VERSION=$(cat version.txt)
          fi

          if [ -n "$NEW_VERSION" ]; then
            echo "New version detected: $NEW_VERSION"

            # Atualizar version.txt
            echo $NEW_VERSION > version.txt

            # Atualizar package.json (se existir)
            if [ -f "package.json" ]; then
              npm version $NEW_VERSION --no-git-tag-version
              echo "Updated package.json"
            fi

            # Atualizar frontend/package.json (se existir)
            if [ -f "frontend/package.json" ]; then
              cd frontend
              npm version $NEW_VERSION --no-git-tag-version
              cd ..
              echo "Updated frontend/package.json"
            fi

            # Atualizar backend/setup.py (se existir)
            if [ -f "backend/src/camara_de_curitiba/setup.py" ]; then
              sed -i "s/version='[^']*'/version='$NEW_VERSION'/" backend/src/camara_de_curitiba/setup.py
              echo "Updated backend/setup.py"
            fi

            echo "Updated all version files and changelog to: $NEW_VERSION"
          else
            echo "No version bump needed, but updating changelog..."
            # Executar apenas o plugin changelog para atualizar o CHANGELOG.md
            npx semantic-release --dry-run --no-ci --plugins @semantic-release/changelog
            NEW_VERSION=$(cat version.txt)
          fi

          # Sempre fazer commit das mudanças (versão ou changelog)
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: update version and changelog [skip ci]"
          git push

          # Criar tag v-dev (sem ser release)
          git tag v-dev
          git push origin v-dev
          echo "Created tag v-dev"

      - name: HML - Create Homolog Release
        if: github.ref == 'refs/heads/homolog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para homolog (com plugin GitHub)
          cp .releaserc.production .releaserc

          # Executar semantic-release para homolog
          npx semantic-release --no-ci

          echo "Homolog release created successfully"

      - name: Main - Create Production Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para main (com plugin GitHub)
          cp .releaserc.production .releaserc

          # Executar semantic-release para main
          npx semantic-release --no-ci

          echo "Production release created successfully"

  build-image:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag version
        id: version
        run: |
          # Get the latest tag criada pelo semantic-release
          if [ "${{ github.ref_name }}" = "main" ]; then
            # Para main, pega a última tag de produção (que NÃO contém 'homolog')
            LATEST_TAG=$(git tag --list | grep -v 'homolog' | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="latest"
            fi
          else
            # Para outras branches, pega a última tag normalmente
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          fi

          # Remover sufixos como +001, +build, etc. para compatibilidade com Docker
          CLEAN_TAG=$(echo $LATEST_TAG | sed 's/+[^+]*$//')

          echo "version=$CLEAN_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $CLEAN_TAG (cleaned from $LATEST_TAG)"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/frontend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/frontend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/backend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
