name: Release

on:
  push:
    branches:
      - homolog
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm @semantic-release/github

      - name: Semantic Release (Dry Run for Protected Branches)
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # For protected branches, we'll do a dry run and let auto-pr handle the actual release
          npx semantic-release --dry-run
        working-directory: ./

      - name: Semantic Release (Normal for Non-Protected Branches)
        if: github.ref == 'refs/heads/homolog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
        working-directory: ./

  build-image:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag version
        id: version
        run: |
          # Get the latest tag created by semantic-release
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $LATEST_TAG"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/frontend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/backend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
