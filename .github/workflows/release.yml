name: Release

on:
  push:
    branches:
      - develop
      - homolog
      - main
      - 'hotfix/*'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm @semantic-release/github

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup GitHub CLI
        run: |
          gh --version
          echo "‚úÖ GitHub CLI est√° dispon√≠vel"
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          echo "‚úÖ GitHub CLI autenticado"
          echo "üìã Verificando GITHUB_TOKEN..."
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "‚úÖ GITHUB_TOKEN est√° dispon√≠vel"
            echo "üìã Token (primeiros 10 caracteres): ${GITHUB_TOKEN:0:10}..."
          else
            echo "‚ùå GITHUB_TOKEN n√£o est√° dispon√≠vel"
            exit 1
          fi

      - name: DEVELOP - Update Version and Changelog
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configura√ß√£o espec√≠fica para develop
          cp .releaserc.develop .releaserc

          # Executar semantic-release para atualizar vers√£o e changelog
          npx semantic-release --no-ci

          echo "Develop version and changelog updated successfully"

      - name: HOMOLOG - Create Homolog Release
        if: github.ref == 'refs/heads/homolog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Exportar token explicitamente
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          # Verificar se o token est√° dispon√≠vel
          echo "üìã Verificando GITHUB_TOKEN..."
          if [ -n "$GITHUB_TOKEN" ]; then
            echo "‚úÖ GITHUB_TOKEN est√° dispon√≠vel"
          else
            echo "‚ùå GITHUB_TOKEN n√£o est√° dispon√≠vel"
            exit 1
          fi

          # Usar configura√ß√£o espec√≠fica para homolog (sem alterar package.json)
          # Usar configura√ß√£o espec√≠fica para homolog (sem alterar package.json)
          cp .releaserc.homolog .releaserc

          # Verificar e limpar tags conflitantes ANTES do semantic-release
          echo "üîç Verificando tags existentes..."
          EXISTING_TAGS=$(git tag --list)
          echo "Tags existentes:"
          echo "$EXISTING_TAGS"

          # Encontrar a √∫ltima tag de develop (sem sufixos)
          echo "üîç Buscando √∫ltima tag de develop..."
          echo "Todas as tags:"
          git tag --list | sort -V

          LATEST_DEVELOP_TAG=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "homolog" | sort -V | tail -n1)
          echo "√öltima tag de develop encontrada: $LATEST_DEVELOP_TAG"

          # Verificar se h√° tags mais recentes que podem ter sido perdidas
          ALL_VERSION_TAGS=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "homolog" | sort -V)
          echo "Todas as tags de vers√£o:"
          echo "$ALL_VERSION_TAGS"

          if [ -n "$LATEST_DEVELOP_TAG" ]; then
            # Extrair vers√£o base
            BASE_VERSION=${LATEST_DEVELOP_TAG#v}
            POTENTIAL_HOMOLOG_TAG="v${BASE_VERSION}-homolog"

            echo "Tag potencial de homolog: $POTENTIAL_HOMOLOG_TAG"

            # Verificar se a tag potencial j√° existe
            if git tag --list | grep -q "^$POTENTIAL_HOMOLOG_TAG$"; then
              echo "‚ö†Ô∏è  Tag $POTENTIAL_HOMOLOG_TAG j√° existe. Removendo..."
              git tag -d "$POTENTIAL_HOMOLOG_TAG" 2>/dev/null || true
              git push origin ":refs/tags/$POTENTIAL_HOMOLOG_TAG" 2>/dev/null || true
              echo "‚úÖ Tag $POTENTIAL_HOMOLOG_TAG removida"
            fi
          fi

          # Remover tags conflitantes
          echo "üßπ Removendo tags conflitantes..."
          git tag -d homolog 2>/dev/null || true
          git push origin :refs/tags/homolog 2>/dev/null || true

          # Criar tag de homolog baseada na vers√£o de develop
          if [ -n "$LATEST_DEVELOP_TAG" ]; then
            BASE_VERSION=${LATEST_DEVELOP_TAG#v}
            HOMOLOG_TAG="v${BASE_VERSION}-homolog"

            echo "üîÑ Criando tag de homolog baseada na vers√£o de develop: $HOMOLOG_TAG"

            # Remover tag se j√° existir
            git tag -d "$HOMOLOG_TAG" 2>/dev/null || true
            git push origin ":refs/tags/$HOMOLOG_TAG" 2>/dev/null || true

            # Criar nova tag
            git tag "$HOMOLOG_TAG"
            git push origin "refs/tags/$HOMOLOG_TAG"
            echo "‚úÖ Tag criada: $HOMOLOG_TAG"

            # Definir como tag de homolog mais recente
            LATEST_HOMOLOG_TAG="$HOMOLOG_TAG"
          else
            echo "‚ùå N√£o foi poss√≠vel determinar a vers√£o base para homolog"
            exit 1
          fi

          # Verificar se a tag de homolog foi definida corretamente
          if [ -n "$LATEST_HOMOLOG_TAG" ]; then
            echo "‚úÖ Tag de homolog definida: $LATEST_HOMOLOG_TAG"
          else
            echo "‚ùå Nenhuma tag de homolog foi criada"
            exit 1
          fi

          # Criar GitHub Release para homolog (pre-release)
          if [ -n "$LATEST_HOMOLOG_TAG" ] && [ -n "$LATEST_DEVELOP_TAG" ]; then
            echo "üöÄ Criando GitHub Release para homolog..."

            # Usar script simples que n√£o depende de jq
            echo "üìã Usando script simples..."
            ./scripts/create-github-release-simple.sh "$LATEST_HOMOLOG_TAG" "prerelease" "$LATEST_DEVELOP_TAG"

            echo "‚úÖ GitHub Release criado para $LATEST_HOMOLOG_TAG (pre-release)"
          fi

          echo "‚úÖ Homolog release created successfully"

      - name: MAIN - Create Production Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Exportar token explicitamente
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          # Verificar se o token est√° dispon√≠vel
          echo "üìã Verificando GITHUB_TOKEN..."
          if [ -n "$GITHUB_TOKEN" ]; then
            echo "‚úÖ GITHUB_TOKEN est√° dispon√≠vel"
          else
            echo "‚ùå GITHUB_TOKEN n√£o est√° dispon√≠vel"
            exit 1
          fi

          # Usar configura√ß√£o espec√≠fica para main (sem alterar package.json)
          cp .releaserc.main .releaserc

          # Verificar e limpar tags conflitantes ANTES do semantic-release
          echo "üîç Verificando tags existentes..."
          EXISTING_TAGS=$(git tag --list)
          echo "Tags existentes:"
          echo "$EXISTING_TAGS"

          # Encontrar a √∫ltima tag de develop (sem sufixos)
          LATEST_DEVELOP_TAG=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v -E 'homolog|latest|release' | sort -V | tail -n1)
          echo "√öltima tag de develop: $LATEST_DEVELOP_TAG"

          if [ -n "$LATEST_DEVELOP_TAG" ]; then
            # Verificar se a tag de develop j√° existe como tag de produ√ß√£o
            if git tag --list | grep -q "^$LATEST_DEVELOP_TAG$"; then
              echo "‚ö†Ô∏è  Tag $LATEST_DEVELOP_TAG j√° existe. Verificando se √© uma tag de produ√ß√£o..."
              # Se a tag j√° existe, vamos us√°-la como tag de produ√ß√£o
              LATEST_MAIN_TAG=$LATEST_DEVELOP_TAG
              echo "‚úÖ Usando tag existente como produ√ß√£o: $LATEST_MAIN_TAG"
            fi
          fi

          # Remover tags conflitantes
          echo "üßπ Removendo tags conflitantes..."
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true

          # Promover vers√£o de develop para produ√ß√£o
          if [ -n "$LATEST_DEVELOP_TAG" ]; then
            echo "üîÑ Promovendo vers√£o de develop para produ√ß√£o: $LATEST_DEVELOP_TAG"

            # Verificar se a tag j√° existe como tag de produ√ß√£o
            if git tag --list | grep -q "^$LATEST_DEVELOP_TAG$"; then
              echo "‚úÖ Tag de produ√ß√£o j√° existe: $LATEST_DEVELOP_TAG"
              LATEST_MAIN_TAG=$LATEST_DEVELOP_TAG
            else
              echo "üîÑ Criando tag de produ√ß√£o: $LATEST_DEVELOP_TAG"
              git tag "$LATEST_DEVELOP_TAG"
              git push origin "refs/tags/$LATEST_DEVELOP_TAG"
              LATEST_MAIN_TAG=$LATEST_DEVELOP_TAG
              echo "‚úÖ Tag de produ√ß√£o criada: $LATEST_MAIN_TAG"
            fi
          else
            echo "‚ùå N√£o foi poss√≠vel determinar a vers√£o para produ√ß√£o"
            exit 1
          fi

          # Verificar se a tag de produ√ß√£o foi definida corretamente
          if [ -n "$LATEST_MAIN_TAG" ]; then
            echo "‚úÖ Tag de produ√ß√£o definida: $LATEST_MAIN_TAG"
          else
            echo "‚ùå Nenhuma vers√£o encontrada para produ√ß√£o"
            exit 1
          fi

          # Criar GitHub Release para produ√ß√£o (release)
          if [ -n "$LATEST_MAIN_TAG" ] && [ -n "$LATEST_DEVELOP_TAG" ]; then
            echo "üöÄ Criando GitHub Release para produ√ß√£o..."

            # Usar script simples que n√£o depende de jq
            echo "üìã Usando script simples..."
            ./scripts/create-github-release-simple.sh "$LATEST_MAIN_TAG" "release" "$LATEST_DEVELOP_TAG"

            echo "‚úÖ GitHub Release criado para $LATEST_MAIN_TAG (release)"
          fi

          echo "‚úÖ Production release completed successfully"

      - name: HOTFIX - Create Hotfix Release
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configura√ß√£o espec√≠fica para hotfix
          cp .releaserc.hotfix .releaserc

          # Remover tags conflitantes ANTES do semantic-release
          echo "Removendo tags conflitantes antes do semantic-release..."
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true

          # Executar semantic-release para criar release de hotfix
          npx semantic-release --no-ci

          # Atualizar tag 'latest' para apontar para a vers√£o mais recente
          LATEST_MAIN_TAG=$(git tag --list | grep -v "homolog" | sort -V | tail -n1)
          if [ -n "$LATEST_MAIN_TAG" ]; then
            # Remover tag latest se existir
            git tag -d latest 2>/dev/null || true
            git push origin :refs/tags/latest 2>/dev/null || true

            # Criar nova tag latest
            git tag latest $LATEST_MAIN_TAG
            git push origin refs/tags/latest
            echo "Updated tag 'latest' to point to $LATEST_MAIN_TAG"
          fi

          echo "Hotfix release created successfully"

      # Checar altera√ß√µes e rodar semantic-release nos addons e pacotes
      - name: Check changes in volto-camara-de-curitiba
        id: changes_volto_camara
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/src/addons/volto-camara-de-curitiba/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Addon volto-camara-de-curitiba
        if: steps.changes_volto_camara.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --extends frontend/src/addons/volto-camara-de-curitiba/.releaserc

      - name: Check changes in partidos-addon
        id: changes_partidos
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/src/addons/partidos-addon/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Addon partidos-addon
        if: steps.changes_partidos.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --extends frontend/src/addons/partidos-addon/.releaserc

      - name: Check changes in volto-mui-blocks
        id: changes_mui_blocks
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/src/addons/volto-mui-blocks/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Addon volto-mui-blocks
        if: steps.changes_mui_blocks.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --extends frontend/src/addons/volto-mui-blocks/.releaserc

      - name: Check changes in volto-slider-banner
        id: changes_slider_banner
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/src/addons/volto-slider-banner/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Addon volto-slider-banner
        if: steps.changes_slider_banner.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --extends frontend/src/addons/volto-slider-banner/.releaserc

      - name: Check changes in frontend
        id: changes_frontend
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Frontend
        if: steps.changes_frontend.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --extends frontend/.releaserc

      - name: Check changes in backend
        id: changes_backend
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^backend/src/camara_de_curitiba/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Release Backend
        if: steps.changes_backend.outputs.changed == 'true'
        working-directory: backend/src/camara_de_curitiba
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install -r requirements.txt || true
          npx semantic-release --no-ci

  build-image:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version for tagging
        id: version
        run: |
          if [ "${{ github.ref_name }}" = "main" ] || [[ "${{ github.ref_name }}" == hotfix/* ]]; then
            # Para main e hotfix, pega a √∫ltima tag de produ√ß√£o (que N√ÉO cont√©m 'homolog')
            LATEST_TAG=$(git tag --list | grep -v 'homolog' | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="latest"
            fi
          else
            # Para homolog, pega a √∫ltima tag de homolog
            LATEST_TAG=$(git tag --list "*homolog*" | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="homolog"
            fi
          fi

          # Para homolog, garantir que o sufixo -homolog esteja presente
          if [ "${{ github.ref_name }}" = "homolog" ]; then
            if [[ "$LATEST_TAG" != *"-homolog"* ]]; then
              LATEST_TAG="${LATEST_TAG}-homolog"
            fi
          fi

          # Remover sufixos como +001, +build, etc. para compatibilidade com Docker
          CLEAN_TAG=$(echo $LATEST_TAG | sed 's/+[^+]*$//')

          echo "version=$CLEAN_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $CLEAN_TAG (cleaned from $LATEST_TAG)"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/frontend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/frontend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/backend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/backend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
