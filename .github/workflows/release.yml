name: Release

on:
  push:
    branches:
      - homolog
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm @semantic-release/github

      # Removido o step de semantic-release para develop, não haverá mais criação ou simulação de tags nessa branch.

      # Removido o step de semantic-release para develop, não haverá mais criação ou simulação de tags nessa branch.

      - name: Bump Version for Develop (Update Files)
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Executar semantic-release normalmente para atualizar arquivos
          # mas configurar para não criar tags (usando configuração específica)
          npx semantic-release --no-ci
          
          echo "Updated package.json, CHANGELOG.md and version.txt"
          
          # Commit das mudanças
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump version and update changelog [skip ci]"
          git push
        working-directory: ./

      - name: Create Homolog Release
        if: github.ref == 'refs/heads/homolog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Executar semantic-release em dry-run para pegar a versão
          npx semantic-release --dry-run --no-ci
          
          # Capturar a versão do output
          VERSION=$(npx semantic-release --dry-run --no-ci 2>&1 | grep -o "The next release version is [0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*" | head -1)
          
          if [ -z "$VERSION" ]; then
            # Se não conseguir pegar do semantic-release, tentar ler do version.txt
            if [ -f "version.txt" ]; then
              VERSION=$(cat version.txt)
            else
              echo "Error: Could not determine version"
              exit 1
            fi
          fi
          
          TAG_NAME="v${VERSION}-homolog"
          echo "Creating homolog release: $TAG_NAME"
          
          # Criar tag localmente
          git tag $TAG_NAME
          
          # Push da tag para o repositório
          git push origin $TAG_NAME
          
          # Criar release como pre-release no GitHub com changelog
          gh release create $TAG_NAME --prerelease --title "$TAG_NAME" --notes-file CHANGELOG.md
          
          echo "Release $TAG_NAME created successfully as pre-release"

      - name: Create Production Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Executar semantic-release em dry-run para pegar a versão
          npx semantic-release --dry-run --no-ci
          
          # Capturar a versão do output
          VERSION=$(npx semantic-release --dry-run --no-ci 2>&1 | grep -o "The next release version is [0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*" | head -1)
          
          if [ -z "$VERSION" ]; then
            # Se não conseguir pegar do semantic-release, tentar ler do version.txt
            if [ -f "version.txt" ]; then
              VERSION=$(cat version.txt)
            else
              echo "Error: Could not determine version"
              exit 1
            fi
          fi
          
          TAG_NAME="v${VERSION}"
          echo "Creating production release: $TAG_NAME"
          
          # Criar tag localmente
          git tag $TAG_NAME
          
          # Push da tag para o repositório
          git push origin $TAG_NAME
          
          # Criar release final no GitHub com changelog
          gh release create $TAG_NAME --title "$TAG_NAME" --notes-file CHANGELOG.md
          
          echo "Release $TAG_NAME created successfully"

  build-image:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag version
        id: version
        run: |
          # Get the latest tag criada pelo semantic-release
          if [ "${{ github.ref_name }}" = "main" ]; then
            # Para main, pega a última tag de produção (que NÃO contém 'homolog')
            LATEST_TAG=$(git tag --list | grep -v 'homolog' | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="latest"
            fi
          else
            # Para outras branches, pega a última tag normalmente
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          fi
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $LATEST_TAG"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/frontend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/frontend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/backend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
