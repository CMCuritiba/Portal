name: Release

on:
  push:
    branches:
      - develop
      - homolog
      - main
      - 'hotfix/*'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm @semantic-release/github

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: DEVELOP - Update Version and Changelog
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para develop
          cp .releaserc.develop .releaserc

          # Executar semantic-release para atualizar versão e changelog
          npx semantic-release --no-ci

          echo "Develop version and changelog updated successfully"

      - name: HOMOLOG - Create Homolog Release
        if: github.ref == 'refs/heads/homolog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para homolog
          cp .releaserc.production .releaserc

          # Verificar se há commits relevantes desde a última versão
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS_SINCE_LAST=$(git log --oneline $LAST_TAG..HEAD --grep="^Merge pull request" --grep="^feat:" --grep="^fix:" --grep="^refactor:" --grep="^perf:" --grep="^docs:" --grep="^style:" --grep="^test:" --grep="^chore:" --grep="^ci:" --grep="^build:" | wc -l)
          else
            COMMITS_SINCE_LAST=$(git log --oneline --grep="^Merge pull request" --grep="^feat:" --grep="^fix:" --grep="^refactor:" --grep="^perf:" --grep="^docs:" --grep="^style:" --grep="^test:" --grep="^chore:" --grep="^ci:" --grep="^build:" | wc -l)
          fi

          echo "Commits relevantes desde a última versão: $COMMITS_SINCE_LAST"

          # Se não há commits relevantes, criar um commit de força
          if [ "$COMMITS_SINCE_LAST" -eq 0 ]; then
            echo "Nenhum commit relevante detectado. Criando commit de força..."
            git commit --allow-empty -m "chore: force homolog release - Forçar criação de release de homolog devido a merges de PRs [skip ci]"
            git push origin homolog
          fi

          # Executar semantic-release para criar release de homolog
          npx semantic-release --no-ci

          # Atualizar tag 'homolog' para apontar para a versão mais recente
          LATEST_HOMOLOG_TAG=$(git tag --list "*homolog*" | sort -V | tail -n1)
          if [ -n "$LATEST_HOMOLOG_TAG" ]; then
            # Remover tag homolog se existir
            git tag -d homolog 2>/dev/null || true
            git push origin :refs/tags/homolog 2>/dev/null || true
            
            # Criar nova tag homolog
            git tag homolog $LATEST_HOMOLOG_TAG
            git push origin homolog
            echo "Updated tag 'homolog' to point to $LATEST_HOMOLOG_TAG"
          fi

          echo "Homolog release created successfully"

      - name: MAIN - Create Production Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para main
          cp .releaserc.production .releaserc

          # Verificar se há commits relevantes desde a última versão
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS_SINCE_LAST=$(git log --oneline $LAST_TAG..HEAD --grep="^Merge pull request" --grep="^feat:" --grep="^fix:" --grep="^refactor:" --grep="^perf:" --grep="^docs:" --grep="^style:" --grep="^test:" --grep="^chore:" --grep="^ci:" --grep="^build:" | wc -l)
          else
            COMMITS_SINCE_LAST=$(git log --oneline --grep="^Merge pull request" --grep="^feat:" --grep="^fix:" --grep="^refactor:" --grep="^perf:" --grep="^docs:" --grep="^style:" --grep="^test:" --grep="^chore:" --grep="^ci:" --grep="^build:" | wc -l)
          fi

          echo "Commits relevantes desde a última versão: $COMMITS_SINCE_LAST"

          # Se não há commits relevantes, criar um commit de força
          if [ "$COMMITS_SINCE_LAST" -eq 0 ]; then
            echo "Nenhum commit relevante detectado. Criando commit de força..."
            git commit --allow-empty -m "chore: force production release - Forçar criação de release de produção devido a merges de PRs [skip ci]"
            git push origin main
          fi

          # Executar semantic-release para criar release de produção
          npx semantic-release --no-ci

          # Atualizar tag 'latest' para apontar para a versão mais recente
          LATEST_MAIN_TAG=$(git tag --list | grep -v "homolog" | sort -V | tail -n1)
          if [ -n "$LATEST_MAIN_TAG" ]; then
            # Remover tag latest se existir
            git tag -d latest 2>/dev/null || true
            git push origin :refs/tags/latest 2>/dev/null || true
            
            # Criar nova tag latest
            git tag latest $LATEST_MAIN_TAG
            git push origin latest
            echo "Updated tag 'latest' to point to $LATEST_MAIN_TAG"
          fi

          echo "Production release created successfully"

      - name: HOTFIX - Create Hotfix Release
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usar configuração específica para hotfix
          cp .releaserc.hotfix .releaserc

          # Executar semantic-release para criar release de hotfix
          npx semantic-release --no-ci

          # Atualizar tag 'latest' para apontar para a versão mais recente
          LATEST_MAIN_TAG=$(git tag --list | grep -v "homolog" | sort -V | tail -n1)
          if [ -n "$LATEST_MAIN_TAG" ]; then
            # Remover tag latest se existir
            git tag -d latest 2>/dev/null || true
            git push origin :refs/tags/latest 2>/dev/null || true
            
            # Criar nova tag latest
            git tag latest $LATEST_MAIN_TAG
            git push origin latest
            echo "Updated tag 'latest' to point to $LATEST_MAIN_TAG"
          fi

          echo "Hotfix release created successfully"

  build-image:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version for tagging
        id: version
        run: |
          if [ "${{ github.ref_name }}" = "main" ] || [[ "${{ github.ref_name }}" == hotfix/* ]]; then
            # Para main e hotfix, pega a última tag de produção (que NÃO contém 'homolog')
            LATEST_TAG=$(git tag --list | grep -v 'homolog' | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="latest"
            fi
          else
            # Para homolog, pega a última tag de homolog
            LATEST_TAG=$(git tag --list "*homolog*" | sort -V | tail -n1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="homolog"
            fi
          fi

          # Remover sufixos como +001, +build, etc. para compatibilidade com Docker
          CLEAN_TAG=$(echo $LATEST_TAG | sed 's/+[^+]*$//')

          echo "version=$CLEAN_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $CLEAN_TAG (cleaned from $LATEST_TAG)"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/frontend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/frontend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/frontend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/cmcuritiba/portal/backend:${{ steps.version.outputs.version }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.sha }}
            ghcr.io/cmcuritiba/portal/backend:${{ github.ref_name }}
            ${{ github.ref_name == 'main' && 'ghcr.io/cmcuritiba/portal/backend:latest' || '' }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
