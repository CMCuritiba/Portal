name: Docker Build and Push Backend for testing

on:
  push:
    branches: ["test" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  PYTHON_VERSION: "3.12"

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      PLONE_VERSION: ${{ steps.vars.outputs.PLONE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Env Vars
        id: vars
        run: |
          echo "PLONE_VERSION=$(cat backend/version.txt)" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=test
            type=raw,value=${{ needs.version.outputs.version }}
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    environment: test  # ðŸ‘ˆ Isso seta o ambiente "test"
    needs: build-and-push
    steps:
      - name: Connect via SSH and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            echo "Fazendo pull da imagem atualizada..."
            docker pull ghcr.io/cmcuritiba/portal/backend:test

            echo "Parando e removendo containers com 'backend' no nome da imagem..."
            for id in $(docker ps -a | grep backend | awk '{print $1}'); do
              docker stop $id || true
            done
