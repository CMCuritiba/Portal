name: Docker Build and Push

on:
  push:
    branches: ["test" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  PYTHON_VERSION: "3.11"

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      PLONE_VERSION: ${{ steps.vars.outputs.PLONE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Env Vars
        id: vars
        run: |
          echo "PLONE_VERSION=$(cat backend/version.txt)" >> $GITHUB_OUTPUT
#
#  black:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout codebase
#        uses: actions/checkout@v4
#
#      - name: Run check
#        uses: plone/code-analysis-action@v2
#        with:
#          base_dir: 'backend'
#          check: 'black'
#
#  flake8:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout codebase
#        uses: actions/checkout@v4
#
#      - name: Run check
#        uses: plone/code-analysis-action@v2
#        with:
#          base_dir: 'backend'
#          check: 'flake8'

  zpretty:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Run check
        uses: plone/code-analysis-action@v2
        with:
          base_dir: 'backend'
          check: 'zpretty'

  tests:
    runs-on: ubuntu-latest
    needs:
      - meta
      - zpretty
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Plone ${{ needs.meta.outputs.PLONE_VERSION }} with Python ${{ env.PYTHON_VERSION }}
        uses: plone/setup-plone@v2.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          plone-version: ${{ needs.meta.outputs.PLONE_VERSION }}

      - name: Install package
        run: |
          pip install mxdev
          mxdev -c mx.ini
          pip install -r requirements-mxdev.txt

      - name: Run tests
        run: |
          pytest --disable-warnings src/camara_de_curitiba/tests

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - tests
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=homolog
            type=raw,value=${{ needs.version.outputs.version }}
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
