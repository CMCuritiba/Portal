name: CI Frontend

on:
  pull_request:
    types:
      - closed
    branches:
      - "develop"
      - "homolog"
    paths:
      - "frontend/**"
  push:
    branches:
      - "homolog"
    paths:
      - "frontend/package.json"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cmcuritiba/portal/frontend
  NODE_VERSION: 20.x

jobs:
  code-analysis:
    defaults:
      run:
        working-directory: ./frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Update Global Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

#      - name: Prettier
#        id: prettier
#        run: npx prettier@3.0.3 --single-quote --check 'src/**/*.{js,jsx,ts,tsx,css,scss}' --config=package.json
#
      - name: Install packages
        run: make install
#
#      - name: ESLint
#        id: eslint
#        if: ${{ success() || failure() }}
#        run: yarn run lint:ci
#
#      - name: i18n sync
#        id: i18n
#        if: ${{ success() || failure() }}
#        run: make i18n-ci
#
#      - name: Unit Tests
#        id: unit
#        if: ${{ success() || failure() }}
#        run: make test
#
#      - name: Report
#        if: ${{ success() || failure() }}
#        run: |
#          echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
##          echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
#          echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
##          echo '| Prettier | ${{ steps.prettier.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
##          echo '| ESLint | ${{ steps.eslint.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
##          echo '| i18n | ${{ steps.i18n.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
#          echo '| Unit Tests | ${{ steps.unit.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY

  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.result.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for package.json change
        id: version_check
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - './frontend/package.json'
      - id: result
        run: echo "changed=${{ steps.version_check.outputs.frontend }}" >> $GITHUB_OUTPUT

  build-and-push:
    if: needs.check-version.outputs.changed == 'true'

    runs-on: ubuntu-latest
    needs:
      - check-version
      - code-analysis

    env:
      BRANCH: ${{ contains(github.ref, 'homolog') && 'homolog' || 'develop' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version and build metadata
        id: version
        working-directory: ./frontend
        run: |
          VERSION=$(jq -r '.version' package.json)
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          BUILD_NUMBER="001"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

          if [[ "${{ env.BRANCH }}" == "homolog" ]]; then
            echo "tag_with_build=${VERSION}-homolog-${BUILD_NUMBER}" >> $GITHUB_OUTPUT
            echo "tag_with_timestamp=${VERSION}-homolog-${TIMESTAMP}" >> $GITHUB_OUTPUT
          else
            echo "tag_with_build=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag_with_timestamp=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: frontend
          file: frontend/Dockerfile
          push: ${{ contains(github.ref, 'homolog') }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag_with_build }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag_with_timestamp }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: develop
    needs:
      - check-version
      - build-and-push
    if: needs.check-version.outputs.changed == 'true' && contains(github.ref, 'homolog')

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
        aws-region: ${{ secrets.DEV_AWS_REGION }}

    - name: Deploy Frontend on Amazon ECS
      run: |
        aws ecs update-service \
          --cluster "${{ secrets.DEV_ECS_CLUSTER }}" \
          --service "${{ secrets.DEV_ECS_SERVICE_FRONTEND }}" \
          --cli-input-json '{"forceNewDeployment": true}' >/dev/null

