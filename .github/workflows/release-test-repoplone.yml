name: Release Test Branch

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install RepoPlone and Towncrier
        run: |
          uvx repoplone --version
          pip install towncrier

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create news fragments with towncrier create
        run: |
          echo "📝 Criando fragments usando towncrier create..."
          
          # Criar diretórios para fragments
          mkdir -p backend/news/breaking backend/news/feature backend/news/bugfix backend/news/internal backend/news/documentation
          mkdir -p news/breaking news/feature news/bugfix news/internal news/documentation
          
          # Obter commits desde a última tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Última tag: $LAST_TAG"
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          else
            echo "Nenhuma tag encontrada, analisando todos os commits"
            COMMITS=$(git log --oneline)
          fi
          
          # Processar cada commit e criar fragments usando towncrier create
          echo "$COMMITS" | while IFS= read -r commit; do
            COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
            
            echo "📝 Processando commit: $commit"
            
            # Determinar tipo de fragment baseado na mensagem do commit
            if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE\|!:"; then
              FRAGMENT_TYPE="breaking"
            elif echo "$COMMIT_MSG" | grep -q "feat:"; then
              FRAGMENT_TYPE="feature"
            elif echo "$COMMIT_MSG" | grep -q "fix:"; then
              FRAGMENT_TYPE="bugfix"
            elif echo "$COMMIT_MSG" | grep -q "refactor:\|perf:\|build:"; then
              FRAGMENT_TYPE="internal"
            elif echo "$COMMIT_MSG" | grep -q "docs:"; then
              FRAGMENT_TYPE="documentation"
            else
              FRAGMENT_TYPE="feature"
            fi
            
            # Criar fragment no backend
            cd backend
            echo "$COMMIT_MSG" | towncrier create --content "$COMMIT_MSG" --type "$FRAGMENT_TYPE" || {
              echo "$COMMIT_MSG" > "news/$FRAGMENT_TYPE/$(date +%s)-$FRAGMENT_TYPE.md"
            }
            cd ..
            
            # Criar fragment no repositório base
            echo "$COMMIT_MSG" | towncrier create --content "$COMMIT_MSG" --type "$FRAGMENT_TYPE" || {
              echo "$COMMIT_MSG" > "news/$FRAGMENT_TYPE/$(date +%s)-$FRAGMENT_TYPE.md"
            }
          done

      - name: Run RepoPlone
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🚀 Executando RepoPlone..."
          uvx repoplone changelog
          yes | uvx repoplone release patch

      - name: Cleanup news fragments
        run: |
          echo "🧹 Limpando fragments de notícias..."
          rm -rf backend/news/*/0*.md
          rm -rf news/*/0*.md
          echo "✅ Fragments removidos"
