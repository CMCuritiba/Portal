name: Release Test Branch

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install RepoPlone
        run: |
          uvx repoplone --version

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Analyze commits for version bump
        run: |
          echo "üîç Analisando commits para determinar tipo de incremento..."
          echo "üìã Tipos de Conventional Commits suportados:"
          echo "   ‚Ä¢ feat: Nova funcionalidade (MINOR)"
          echo "   ‚Ä¢ fix: Corre√ß√£o de bug (PATCH)"
          echo "   ‚Ä¢ refactor: Refatora√ß√£o sem mudan√ßa de comportamento (PATCH)"
          echo "   ‚Ä¢ perf: Melhoria de performance (PATCH)"
          echo "   ‚Ä¢ build: Altera√ß√µes no build (PATCH)"
          echo "   ‚Ä¢ BREAKING CHANGE: Mudan√ßa incompat√≠vel (MAJOR)"
          echo "   ‚Ä¢ chore/docs/style/test/ci/revert: N√£o afetam versionamento"
          
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "√öltima tag: $LAST_TAG"
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          else
            echo "Nenhuma tag encontrada, analisando todos os commits"
            COMMITS=$(git log --oneline)
          fi
          echo "Commits analisados:"
          echo "$COMMITS"
          echo "üîç Analisando padr√µes nos commits..."
          echo "Commits com 'fix:': $(echo "$COMMITS" | grep -c "fix:")"
          echo "Commits com 'feat:': $(echo "$COMMITS" | grep -c "feat:")"
          echo "Commits com 'refactor:': $(echo "$COMMITS" | grep -c "refactor:")"
          echo "Commits com 'perf:': $(echo "$COMMITS" | grep -c "perf:")"
          echo "Commits com 'build:': $(echo "$COMMITS" | grep -c "build:")"
          echo "Commits com 'BREAKING': $(echo "$COMMITS" | grep -c "BREAKING")"
          
          VERSION_BUMP="patch"
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            VERSION_BUMP="major"
            echo "üî¥ Breaking change detectado - MAJOR increment"
          elif echo "$COMMITS" | grep -q "feat:"; then
            VERSION_BUMP="minor"
            echo "üü° Feature detectada - MINOR increment"
          elif echo "$COMMITS" | grep -q "fix:\|refactor:\|perf:"; then
            VERSION_BUMP="patch"
            echo "üü¢ Fix/Refactor/Perf detectado - PATCH increment"
          elif echo "$COMMITS" | grep -q "build:"; then
            VERSION_BUMP="patch"
            echo "üîß Build detectado - PATCH increment (pode afetar vers√£o de build)"
          else
            echo "‚ö™ Nenhum tipo espec√≠fico detectado - PATCH increment (padr√£o)"
          fi
          echo "Tipo de incremento: $VERSION_BUMP"
          echo "VERSION_BUMP=$VERSION_BUMP" >> $GITHUB_ENV
          echo "‚úÖ VERSION_BUMP exportado: $VERSION_BUMP"

      - name: Create news fragments from commits
        run: |
          echo "üìù Criando fragments baseado nos commits..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "√öltima tag: $LAST_TAG"
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          else
            echo "Nenhuma tag encontrada, analisando todos os commits"
            COMMITS=$(git log --oneline)
          fi
          
          # Criar diret√≥rios para fragments baseado na configura√ß√£o do Towncrier
          # RepoPlone usa o backend como principal, ent√£o criamos fragments l√°
          mkdir -p backend/news/breaking backend/news/feature backend/news/bugfix backend/news/internal backend/news/documentation
          
          # Tamb√©m criar fragments para o reposit√≥rio base (monorepo)
          mkdir -p news/breaking news/feature news/bugfix news/internal news/documentation
          
          FRAGMENT_COUNT=1
          echo "$COMMITS" | while IFS= read -r commit; do
            if echo "$commit" | grep -q "BREAKING CHANGE\|!:"; then
              echo "üî¥ Criando fragment para breaking: $commit"
              echo "$commit" > "backend/news/breaking/$(printf "%03d" $FRAGMENT_COUNT)-breaking.md"
              echo "$commit" > "news/breaking/$(printf "%03d" $FRAGMENT_COUNT)-breaking.md"
              FRAGMENT_COUNT=$((FRAGMENT_COUNT + 1))
            elif echo "$commit" | grep -q "feat:"; then
              echo "üü° Criando fragment para feature: $commit"
              echo "$commit" > "backend/news/feature/$(printf "%03d" $FRAGMENT_COUNT)-feature.md"
              echo "$commit" > "news/feature/$(printf "%03d" $FRAGMENT_COUNT)-feature.md"
              FRAGMENT_COUNT=$((FRAGMENT_COUNT + 1))
            elif echo "$commit" | grep -q "fix:"; then
              echo "üü¢ Criando fragment para bugfix: $commit"
              echo "$commit" > "backend/news/bugfix/$(printf "%03d" $FRAGMENT_COUNT)-bugfix.md"
              echo "$commit" > "news/bugfix/$(printf "%03d" $FRAGMENT_COUNT)-bugfix.md"
              FRAGMENT_COUNT=$((FRAGMENT_COUNT + 1))
            elif echo "$commit" | grep -q "refactor:\|perf:\|build:"; then
              echo "üîß Criando fragment para internal: $commit"
              echo "$commit" > "backend/news/internal/$(printf "%03d" $FRAGMENT_COUNT)-internal.md"
              echo "$commit" > "news/internal/$(printf "%03d" $FRAGMENT_COUNT)-internal.md"
              FRAGMENT_COUNT=$((FRAGMENT_COUNT + 1))
            elif echo "$commit" | grep -q "docs:"; then
              echo "üìö Criando fragment para documentation: $commit"
              echo "$commit" > "backend/news/documentation/$(printf "%03d" $FRAGMENT_COUNT)-documentation.md"
              echo "$commit" > "news/documentation/$(printf "%03d" $FRAGMENT_COUNT)-documentation.md"
              FRAGMENT_COUNT=$((FRAGMENT_COUNT + 1))
            fi
          done
          
          if [ ! -f "backend/news/feature/001-feature.md" ] && [ ! -f "backend/news/bugfix/001-bugfix.md" ] && [ ! -f "backend/news/breaking/001-breaking.md" ] && [ ! -f "backend/news/internal/001-internal.md" ] && [ ! -f "backend/news/documentation/001-documentation.md" ]; then
            echo "‚ö†Ô∏è Nenhum commit convencional encontrado, criando fragment padr√£o..."
            mkdir -p backend/news/feature
            echo "Atualiza√ß√£o de vers√£o autom√°tica" > backend/news/feature/001-version-update.md
            mkdir -p news/feature
            echo "Atualiza√ß√£o de vers√£o autom√°tica" > news/feature/001-version-update.md
          fi
          echo "üìã Fragments criados no backend:"
          find backend/news -name "*.md" -type f
          echo "üìã Fragments criados no reposit√≥rio base:"
          find news -name "*.md" -type f

      - name: Generate changelog with RepoPlone
        run: |
          echo "üìù Gerando changelog com RepoPlone..."
          echo "üîç Verificando fragments antes de gerar changelog..."
          echo "Backend news existe: $([ -d "backend/news" ] && echo "sim" || echo "n√£o")"
          echo "Backend news tem conte√∫do: $([ -d "backend/news" ] && [ "$(ls -A backend/news)" ] && echo "sim" || echo "n√£o")"
          echo "Reposit√≥rio news existe: $([ -d "news" ] && echo "sim" || echo "n√£o")"
          echo "Reposit√≥rio news tem conte√∫do: $([ -d "news" ] && [ "$(ls -A news)" ] && echo "sim" || echo "n√£o")"
          
          if [ -d "backend/news" ] && [ "$(ls -A backend/news)" ]; then
            echo "‚úÖ Fragments encontrados no backend, gerando changelog..."
            uvx repoplone changelog
            echo "‚úÖ Changelog gerado com sucesso!"
          elif [ -d "news" ] && [ "$(ls -A news)" ]; then
            echo "‚úÖ Fragments encontrados no reposit√≥rio, gerando changelog..."
            uvx repoplone changelog
            echo "‚úÖ Changelog gerado com sucesso!"
          else
            echo "‚ö†Ô∏è Nenhum fragment encontrado, criando um antes de gerar changelog..."
            mkdir -p backend/news/feature
            echo "Atualiza√ß√£o de vers√£o autom√°tica" > backend/news/feature/001-version-update.md
            mkdir -p news/feature
            echo "Atualiza√ß√£o de vers√£o autom√°tica" > news/feature/001-version-update.md
            uvx repoplone changelog
            echo "‚úÖ Changelog gerado com fragment padr√£o!"
          fi
          echo "üìã Conte√∫do do changelog:"
          if [ -f "CHANGELOG.md" ]; then
            tail -20 CHANGELOG.md
          fi

      - name: Create release with RepoPlone
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üöÄ Criando release com RepoPlone..."
          CURRENT_VERSION=$(cat version.txt)
          echo "Vers√£o atual: $CURRENT_VERSION"
          echo "Tipo de incremento: $VERSION_BUMP"
          echo "DEBUG: Verificando vari√°vel VERSION_BUMP..."
          echo "DEBUG: VERSION_BUMP = '$VERSION_BUMP'"
          echo "DEBUG: VERSION_BUMP length = ${#VERSION_BUMP}"
          
          if [ -z "$VERSION_BUMP" ]; then
            echo "‚ùå VERSION_BUMP n√£o est√° definido, usando patch como padr√£o"
            VERSION_BUMP="patch"
          fi
          if [ "$VERSION_BUMP" != "major" ] && [ "$VERSION_BUMP" != "minor" ] && [ "$VERSION_BUMP" != "patch" ]; then
            echo "‚ùå VERSION_BUMP tem valor inv√°lido: '$VERSION_BUMP', usando patch como padr√£o"
            VERSION_BUMP="patch"
          fi
          echo "Usando segmento: $VERSION_BUMP"
          echo "Comando: uvx repoplone release $VERSION_BUMP --dry-run"
          
          echo "üîç Verificando changelog gerado..."
          if [ -f "CHANGELOG.md" ]; then
            echo "‚úÖ Changelog encontrado:"
            tail -5 CHANGELOG.md
          else
            echo "‚ö†Ô∏è Changelog n√£o encontrado!"
          fi
          
          echo "Tentando release com segmento: $VERSION_BUMP"
          echo "DEBUG: VERSION_BUMP = '$VERSION_BUMP'"
          echo "DEBUG: VERSION_BUMP length = ${#VERSION_BUMP}"
          echo "Tentativa 1: uvx repoplone release $VERSION_BUMP --dry-run"
          uvx repoplone release "$VERSION_BUMP" --dry-run || {
            echo "Tentativa 2: uvx repoplone release $VERSION_BUMP (com confirma√ß√£o autom√°tica)"
            yes | uvx repoplone release "$VERSION_BUMP" 2>&1 | tee release.log || {
              echo "‚ö†Ô∏è Release falhou, verificando se foi no frontend..."
              if grep -q "Frontend release failed" release.log; then
                echo "üîß Frontend falhou, mas backend foi liberado com sucesso"
                echo "‚úÖ Continuando workflow (frontend pode ser configurado depois)"
              else
                echo "Tentativa 3: uvx repoplone release --help"
                uvx repoplone release --help
                echo "‚ùå Comando release n√£o funcionou, pulando..."
              fi
            }
          }
          echo "‚úÖ Release criado com sucesso"
          if [ -f "release.log" ]; then
            echo "üìã Log do release:"
            cat release.log
            if grep -q "Released cmcuritiba:" release.log; then
              echo "‚úÖ Backend liberado com sucesso!"
            fi
          fi

      - name: Cleanup news fragments
        run: |
          echo "üßπ Limpando fragments de not√≠cias..."
          rm -rf backend/news/*/0*.md
          rm -rf news/*/0*.md
          echo "‚úÖ Fragments removidos" 