name: Release Test (RepoPlone Style)

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  release:
    name: Release Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install RepoPlone via uvx
        run: |
          echo "📦 Instalando RepoPlone via uvx..."
          uvx repoplone --version
          echo "✅ RepoPlone disponível via uvx"

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup GitHub Token
        run: |
          echo "🔑 Configurando GitHub Token..."
          echo "GH_TOKEN configurado: ${GH_TOKEN:0:10}..."
          echo "✅ GitHub Token configurado"

      - name: Check current versions
        run: |
          echo "📋 Verificando versões atuais..."
          uvx repoplone versions current

      - name: Analyze commits for version bump
        run: |
          echo "🔍 Analisando commits para determinar tipo de incremento..."
          
          # Obter commits desde a última tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "Última tag: $LAST_TAG"
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          else
            echo "Nenhuma tag encontrada, analisando todos os commits"
            COMMITS=$(git log --oneline)
          fi
          
          echo "Commits analisados:"
          echo "$COMMITS"
          
          # Determinar tipo de incremento baseado nos commits
          VERSION_BUMP="patch"  # padrão
          
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            VERSION_BUMP="major"
            echo "🔴 Breaking change detectado - MAJOR increment"
          elif echo "$COMMITS" | grep -q "feat:"; then
            VERSION_BUMP="minor"
            echo "🟡 Feature detectada - MINOR increment"
          elif echo "$COMMITS" | grep -q "fix:\|bugfix:"; then
            VERSION_BUMP="patch"
            echo "🟢 Fix detectado - PATCH increment"
          else
            echo "⚪ Nenhum tipo específico detectado - PATCH increment (padrão)"
          fi
          
          echo "Tipo de incremento: $VERSION_BUMP"
          echo "VERSION_BUMP=$VERSION_BUMP" >> $GITHUB_ENV

      - name: Generate changelog
        run: |
          echo "📝 Gerando changelog..."
          uvx repoplone changelog

      - name: Create release with RepoPlone
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🚀 Criando release com RepoPlone..."
          
          # Criar release usando RepoPlone
          uvx repoplone release $VERSION_BUMP --dry-run
          
          echo "✅ Release criado com sucesso"

      - name: Commit and push changes
        run: |
          echo "💾 Commitando e enviando alterações..."
          
          # Adicionar todos os arquivos modificados
          git add .
          
          # Verificar se há mudanças
          if git diff --staged --quiet; then
            echo "⚠️ Nenhuma mudança para commitar"
          else
            # Commit das alterações
            git commit -m "chore: release version bump [skip ci]"
            
            # Push das alterações
            git push origin test
            echo "✅ Alterações enviadas para branch test"
          fi 