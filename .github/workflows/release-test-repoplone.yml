name: Release Test (RepoPlone Style)

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  release:
    name: Release Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install RepoPlone via uvx
        run: |
          echo "üì¶ Instalando RepoPlone via uvx..."
          uvx repoplone --version
          echo "‚úÖ RepoPlone dispon√≠vel via uvx"
          
          echo "üìã Comandos dispon√≠veis:"
          uvx repoplone --help

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup GitHub Token
        run: |
          echo "üîë Configurando GitHub Token..."
          echo "GH_TOKEN configurado: ${GH_TOKEN:0:10}..."
          echo "‚úÖ GitHub Token configurado"

      - name: Check current versions
        run: |
          echo "üìã Verificando vers√µes atuais..."
          uvx repoplone versions current
          
          echo "üìã Verificando pr√≥ximas vers√µes..."
          uvx repoplone versions next

      - name: Analyze commits for version bump
        run: |
          echo "üîç Analisando commits para determinar tipo de incremento..."
          
          # Obter commits desde a √∫ltima tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "√öltima tag: $LAST_TAG"
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          else
            echo "Nenhuma tag encontrada, analisando todos os commits"
            COMMITS=$(git log --oneline)
          fi
          
          echo "Commits analisados:"
          echo "$COMMITS"
          
          # Determinar tipo de incremento baseado nos commits
          VERSION_BUMP="patch"  # padr√£o
          
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            VERSION_BUMP="major"
            echo "üî¥ Breaking change detectado - MAJOR increment"
          elif echo "$COMMITS" | grep -q "feat:"; then
            VERSION_BUMP="minor"
            echo "üü° Feature detectada - MINOR increment"
          elif echo "$COMMITS" | grep -q "fix:\|bugfix:"; then
            VERSION_BUMP="patch"
            echo "üü¢ Fix detectado - PATCH increment"
          else
            echo "‚ö™ Nenhum tipo espec√≠fico detectado - PATCH increment (padr√£o)"
          fi
          
          echo "Tipo de incremento: $VERSION_BUMP"
          echo "VERSION_BUMP=$VERSION_BUMP" >> $GITHUB_ENV
          echo "‚úÖ VERSION_BUMP exportado: $VERSION_BUMP"

      - name: Generate changelog
        run: |
          echo "üìù Gerando changelog..."
          
          # Verificar se h√° fragments antes de gerar changelog
          if [ -d "news" ] && [ "$(ls -A news)" ]; then
            echo "‚úÖ Fragments encontrados, gerando changelog..."
            uvx repoplone changelog
          else
            echo "‚ö†Ô∏è Nenhum fragment encontrado, criando um antes de gerar changelog..."
            mkdir -p news/feature
            echo "Nova funcionalidade adicionada" > news/feature/001-test-feature.md
            uvx repoplone changelog
          fi

      - name: Create release with RepoPlone
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üöÄ Criando release com RepoPlone..."
          
          # Ler vers√£o atual
          CURRENT_VERSION=$(cat version.txt)
          echo "Vers√£o atual: $CURRENT_VERSION"
          echo "Tipo de incremento: $VERSION_BUMP"
          
          # Verificar se VERSION_BUMP est√° definido
          if [ -z "$VERSION_BUMP" ]; then
            echo "‚ùå VERSION_BUMP n√£o est√° definido, usando patch como padr√£o"
            VERSION_BUMP="patch"
          fi
          
          echo "Usando segmento: $VERSION_BUMP"
          
          # Debug: mostrar comando completo
          echo "Comando: uvx repoplone release $VERSION_BUMP --dry-run"
          
          # Verificar se h√° fragments de not√≠cias
          echo "üîç Verificando fragments de not√≠cias..."
          if [ -d "news" ] && [ "$(ls -A news)" ]; then
            echo "‚úÖ Fragments encontrados:"
            find news -name "*.md" -type f
          else
            echo "‚ö†Ô∏è Nenhum fragment encontrado, criando um..."
            mkdir -p news/feature
            echo "Nova funcionalidade adicionada" > news/feature/001-test-feature.md
          fi
          
          # Criar release usando RepoPlone com segmento
          # Baseado na documenta√ß√£o: uvx repoplone release <segmento>
          uvx repoplone release $VERSION_BUMP --dry-run
          
          echo "‚úÖ Release criado com sucesso"
          
          # Verificar se as mudan√ßas foram aplicadas
          echo "üîç Verificando mudan√ßas aplicadas..."
          if [ -f "version.txt" ]; then
            echo "Vers√£o ap√≥s release: $(cat version.txt)"
          fi
          
          # Verificar se o changelog foi atualizado
          if [ -f "CHANGELOG.md" ]; then
            echo "Changelog atualizado:"
            tail -10 CHANGELOG.md
          fi

      - name: Commit and push changes
        run: |
          echo "üíæ Commitando e enviando altera√ß√µes..."
          
          # Adicionar todos os arquivos modificados
          git add .
          
          # Verificar se h√° mudan√ßas
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è Nenhuma mudan√ßa para commitar"
          else
            # Commit das altera√ß√µes
            git commit -m "chore: release version bump [skip ci]"
            
            # Push das altera√ß√µes
            git push origin test
            echo "‚úÖ Altera√ß√µes enviadas para branch test"
          fi 